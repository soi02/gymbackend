<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ca.gymbackend.challenge.mapper.GroupChatMessageMapper">

    <!-- 새로운 그룹 채팅 메시지를 데이터베이스에 삽입 -->
    <insert id="insertMessage" parameterType="com.ca.gymbackend.challenge.dto.groupchat.GroupChatMessage" useGeneratedKeys="true" keyProperty="groupChatMessageId">
        INSERT INTO group_chat_message (
            challenge_id,
            sender_user_id,
            group_chat_message_content,
            created_at
        ) VALUES (
            #{challengeId},
            #{senderUserId},
            #{groupChatMessageContent},
            #{createdAt}
        )
    </insert>

    <!-- 특정 챌린지의 모든 메시지 기록을 조회 -->
    <select id="findAllMessagesByChallengeId" resultType="com.ca.gymbackend.challenge.dto.groupchat.GroupChatMessage">
    SELECT
        gcm.group_chat_message_id AS groupChatMessageId,
        gcm.challenge_id AS challengeId,
        gcm.sender_user_id AS senderUserId,
        gcm.group_chat_message_content AS groupChatMessageContent,
        gcm.created_at AS createdAt,
        u.profile_image AS senderProfileImagePath,  u.name AS senderNickname                     
        
    FROM
        group_chat_message gcm
    JOIN
        user u ON gcm.sender_user_id = u.id
    WHERE
        gcm.challenge_id = #{challengeId}
    ORDER BY
        gcm.created_at ASC
    </select>


    <!-- 그룹 채팅 읽음 숫자 관련 -->
    <insert id="insertMessageReadStatus">
        INSERT INTO group_chat_message_read_status (group_chat_message_id, reader_user_id)
        VALUES (#{messageId}, #{userId})
    </insert>

    <select id="hasReadStatus" resultType="boolean">
        SELECT EXISTS (
            SELECT 1 
            FROM group_chat_message_read_status
            WHERE group_chat_message_id = #{messageId} AND reader_user_id = #{userId}
        )
    </select>
    
    <select id="countReadersByMessageId" resultType="long">
        SELECT COUNT(reader_user_id) 
        FROM group_chat_message_read_status 
        WHERE group_chat_message_id = #{messageId}
    </select>
    
    <select id="findChallengeIdByMessageId" resultType="long">
        SELECT challenge_id 
        FROM group_chat_message 
        WHERE group_chat_message_id = #{messageId}
    </select>



   <select id="countParticipantsByChallengeId" resultType="int">
        SELECT COUNT(user_id)
        FROM user_challenge
        WHERE challenge_id = #{challengeId}
    </select>


    <!-- 챌린지 제목을 설정 -->
    <select id="findChallengeTitleById" resultType="String">
        SELECT challenge_title FROM challenge WHERE challenge_id = #{challengeId}
    </select>








<!-- 사용자가 참여 중인 챌린지 + 채팅 요약(최신 메시지/시간/안읽음) -->
<select id="selectJoinedChallengesWithChatSummary"
        parameterType="long"
        resultType="com.ca.gymbackend.challenge.dto.groupchat.GroupChatListItemDto">

  SELECT
    c.challenge_id                             AS challengeId,
    c.challenge_title                           AS challengeTitle,
    c.challenge_thumbnail_path                  AS challengeThumbnailPath,

    (SELECT COUNT(*) FROM user_challenge uc2
     WHERE uc2.challenge_id = c.challenge_id)   AS challengeParticipantCount,

    uc.personal_join_date                       AS personalJoinDate,

    lm.group_chat_message_content               AS lastMessage,
    lm.created_at                               AS lastMessageTime,

    COALESCE((
      SELECT COUNT(*)
      FROM group_chat_message gm
      WHERE gm.challenge_id = c.challenge_id
        /* 여기 ↓↓↓ */
        AND (uc.personal_join_date IS NULL OR gm.created_at >= uc.personal_join_date)
        AND NOT EXISTS (
          SELECT 1
          FROM group_chat_message_read_status rs
          WHERE rs.group_chat_message_id = gm.group_chat_message_id
            AND rs.reader_user_id = #{userId}
        )
    ),0)                                        AS unreadCount

  FROM user_challenge uc
  JOIN challenge c ON c.challenge_id = uc.challenge_id

  LEFT JOIN (
    SELECT g1.challenge_id, g1.group_chat_message_content, g1.created_at
    FROM group_chat_message g1
    INNER JOIN (
      SELECT challenge_id, MAX(created_at) AS max_created
      FROM group_chat_message
      GROUP BY challenge_id
    ) g2 ON g1.challenge_id = g2.challenge_id AND g1.created_at = g2.max_created
  ) lm ON lm.challenge_id = c.challenge_id

  WHERE uc.user_id = #{userId}
  ORDER BY (lm.created_at IS NULL), lm.created_at DESC
</select>



</mapper>