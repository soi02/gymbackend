<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ca.gymbackend.challenge.mapper.ChallengeMapper">

    <!-- 챌린지 생성 -->

    <insert id="createChallenge" parameterType="com.ca.gymbackend.challenge.dto.ChallengeCreateRequest"
            useGeneratedKeys="true" keyProperty="challengeId">
        INSERT INTO challenge (
            challenge_creator,
            challenge_title,
            challenge_description,
            challenge_max_members,
            challenge_recruit_start_date,
            challenge_recruit_end_date,
            challenge_duration_days,
            challenge_thumbnail_path, created_at,
            challenge_participant_count
        ) VALUES (
            #{challengeCreator},
            #{challengeTitle},
            #{challengeDescription},
            #{challengeMaxMembers},
            #{challengeRecruitStartDate},
            #{challengeRecruitEndDate},
            #{challengeDurationDays},
            #{challengeThumbnailPath}, NOW(),
            0
        );
    </insert>

    <insert id="createChallengeKeyword">
        INSERT INTO challenge_keyword (challenge_id, keyword_id)
        VALUES (#{param1}, #{param2});
    </insert>





    <!-- 챌린지 가져오기 (목록) -->
    <select id="findAllChallengeList" resultType="com.ca.gymbackend.challenge.dto.ChallengeCreateRequest">
        SELECT
            challenge_id AS challengeId,
            challenge_creator AS challengeCreator,
            challenge_title AS challengeTitle,
            challenge_description AS challengeDescription,
            challenge_max_members AS challengeMaxMembers,
            challenge_participant_count AS challengeParticipantCount,
            challenge_recruit_start_date AS challengeRecruitStartDate,
            challenge_recruit_end_date AS challengeRecruitEndDate,
            challenge_duration_days AS challengeDurationDays,
            challenge_thumbnail_path AS challengeThumbnailPath
        FROM challenge
    </select>


    <!-- 챌린지 ID를 기준으로 키워드 ID 목록 조회 -->
    <select id="findKeywordIdsByChallengeId" parameterType="int" resultType="int">
        SELECT
            keyword_id
        FROM
            challenge_keyword
        WHERE
            challenge_id = #{challengeId}
    </select>




    <select id="findAllKeywordCategories" resultType="com.ca.gymbackend.challenge.dto.ChallengeKeywordCategory">
        SELECT
            keyword_category_id AS keywordCategoryId,
            keyword_category_name AS keywordCategoryName
        FROM
            keyword_category
    </select>


    <!-- 챌린지 목록 가져오기 (카테고리별 필터 적용) -->
    <select id="findChallengesByCategoryId" parameterType="int" resultType="com.ca.gymbackend.challenge.dto.ChallengeCreateRequest">
        SELECT
            c.challenge_id AS challengeId,
            c.challenge_creator AS challengeCreator,
            c.challenge_title AS challengeTitle,
            c.challenge_description AS challengeDescription,
            c.challenge_max_members AS challengeMaxMembers,
            c.challenge_participant_count AS challengeParticipantCount,
            c.challenge_recruit_start_date AS challengeRecruitStartDate,
            c.challenge_recruit_end_date AS challengeRecruitEndDate,
            c.challenge_duration_days AS challengeDurationDays,
            c.challenge_thumbnail_path AS challengeThumbnailPath
        FROM
            challenge c
        JOIN
            challenge_keyword ck ON c.challenge_id = ck.challenge_id
        JOIN
            keyword k ON ck.keyword_id = k.keyword_id
        WHERE
            k.keyword_category_id = #{categoryId}
        GROUP BY
            c.challenge_id
    </select>



    <!-- 챌린지 상세보기 -->
    <select id="findChallengeDetailByChallengeId" parameterType="int" resultType="com.ca.gymbackend.challenge.dto.ChallengeDetailResponse">
        SELECT
            c.challenge_id AS challengeId,
            c.challenge_creator AS challengeCreator, 
            c.challenge_title AS challengeTitle, 
            c.challenge_description AS challengeDescription, 
            c.challenge_max_members AS challengeMaxMembers, 
            c.challenge_participant_count AS participantCount, 
            c.challenge_recruit_start_date AS challengeRecruitStartDate, 
            c.challenge_recruit_end_date AS challengeRecruitEndDate,     
            c.challenge_duration_days AS challengeDurationDays, 
            c.challenge_thumbnail_path AS challengeThumbnailPath, 
            
            GROUP_CONCAT(k.keyword_name ORDER BY k.keyword_name ASC SEPARATOR ',') AS challengeKeywordsString
    
        FROM
            challenge c
        INNER JOIN
            challenge_keyword ck ON c.challenge_id = ck.challenge_id
        INNER JOIN
            keyword k ON ck.keyword_id = k.keyword_id
        WHERE
            c.challenge_id = #{challengeId}
        GROUP BY
            c.challenge_id, c.challenge_creator, c.challenge_title, c.challenge_description,
            c.challenge_max_members, c.challenge_participant_count,
            c.challenge_duration_days, c.challenge_thumbnail_path, c.created_at
    </select>




    <!-- 챌린지 도전 시작 -->
    <!-- user_challenge 테이블에 이미 해당사용자와 챌린지Id 의 조합이 존재하는지 확인 -->
    <select id="existsUserChallenge" resultType="int">
        SELECT COUNT(*)
        FROM user_challenge
        WHERE user_id = #{userId} AND challenge_id = #{challengeId}
    </select>


    <!-- user_challenge 테이블에 사용자 챌린지 정보를 삽입 -->
    <insert id="insertUserChallenge">
        INSERT INTO user_challenge (
            user_id,
            challenge_id,
            personal_join_date,
            personal_end_date,
            challenge_completed
        ) VALUES (
            #{userId},
            #{challengeId},
            NOW(),
            DATE_ADD(NOW(), 
            INTERVAL (SELECT challenge_duration_days FROM challenge WHERE challenge_id = #{challengeId}) DAY), 'N');
    </insert>

    <!-- 챌린지 참가자 수 증가 -->
    <update id="increaseChallengeParticipantCount">
        UPDATE challenge
        SET challenge_participant_count = challenge_participant_count + 1
        WHERE challenge_id = #{challengeId}
    </update>






    <!-- 나의 수련기록 -->
    <!-- 내가 참여한 챌린지 목록 조회 -->
    <select id="findAllMyChallengeList" resultType="com.ca.gymbackend.challenge.dto.ChallengeMyRecordsResponse">
        SELECT
            c.challenge_id AS challengeId,
            c.challenge_title AS challengeTitle,
            c.challenge_thumbnail_path AS challengeThumbnailPath,
            c.challenge_duration_days AS challengeDurationDays,
            uc.personal_join_date AS personalJoinDate  FROM user_challenge uc         

        JOIN challenge c ON uc.challenge_id = c.challenge_id
        WHERE uc.user_id = #{userId}
        ORDER BY uc.personal_join_date DESC
    </select>


    <!-- 특정 챌린지의 총 출석 일수를 조회 -->
    <select id="countAttendanceDays" resultType="int">
        SELECT COUNT(*)
        FROM attendance_record
        WHERE user_id = #{userId}
        AND challenge_id = #{challengeId}
    </select>

    <!-- 특정 챌린지에서 오늘 출석했는지 출석여부 확인 -->
    <select id="hasAttendedToday" resultType="int">
        SELECT COUNT(*)
        FROM attendance_record
        WHERE user_id = #{userId}
        AND challenge_id = #{challengeId}
        AND attendance_date = CURDATE()
    </select>





    <!-- 특정 사용자의 특정 챌린지 상세 정보 & 인증 기록 조회 -->
    <!-- 챌린지 기본 정보 조회 -->
    <select id="findChallengeInfoByChallengeId" resultType="com.ca.gymbackend.challenge.dto.ChallengeInfo">
        SELECT
            challenge_id AS challengeId,
            challenge_title AS challengeTitle,
            challenge_description AS challengeDescription,
            challenge_thumbnail_path AS challengeThumbnailPath,
            challenge_duration_days AS challengeDurationDays
            FROM challenge
        WHERE challenge_id = #{challengeId}
    </select>

    <!-- 사용자의 챌린지 인증 기록 조회 -->
    <select id="findChallengeRecordList" resultType="com.ca.gymbackend.challenge.dto.ChallengeRecordInfo">
        SELECT
            attendance_record_id AS attendanceRecordId,
            attendance_date AS attendanceDate,
            attendance_image_path AS attendanceImagePath
        FROM attendance_record
        WHERE user_id = #{userId} AND challenge_id = #{challengeId}
        ORDER BY attendance_date ASC
    </select>

    <!-- 챌린지 인증 횟수 계산 -->
    <select id="countAttendanceRecordList" resultType="int">
        SELECT COUNT(*)
        FROM attendance_record
        WHERE user_id = #{userId} AND challenge_id = #{challengeId}
    </select>





    <!-- 노리개 -->
    <!-- 사용자의 챌린지 참여 정보 조회 -->
    <select id="findUserChallengeInfoByUserIdAndChallengeId" resultType="com.ca.gymbackend.challenge.dto.ChallengeUserInfo">
        SELECT
            personal_join_date,
            personal_end_date
        FROM
            user_challenge
        WHERE
            user_id = #{userId} AND challenge_id = #{challengeId}
    </select>

    <!-- 챌린지 상세 진행 상황 조회 (노리개 등급 정보 포함) -->
    <select id="findChallengeProgressInfo" resultType="com.ca.gymbackend.challenge.dto.ChallengeProgressResponse">
        SELECT
            c.challenge_title,
            c.challenge_duration_days AS totalPeriod,
            ucn.awarded_tier_id,
            nt.norigae_tier_name AS awardedNorigaeName,
            nt.norigae_tier_icon_path AS awardedNorigaeIconPath
        FROM
            challenge c
        INNER JOIN
            user_challenge uc ON c.challenge_id = uc.challenge_id
        LEFT JOIN
            user_challenge_norigae ucn ON uc.user_id = ucn.user_id AND uc.challenge_id = ucn.challenge_id
        LEFT JOIN
            norigae_tier nt ON ucn.awarded_tier_id = nt.norigae_tier_id  WHERE
            c.challenge_id = #{challengeId} AND uc.user_id = #{userId}
    </select>







    <!-- 사용자의 출석 기록 조회 -->
    <select id="findAttendanceRecords" resultType="com.ca.gymbackend.challenge.dto.ChallengeAttendanceRecord">
        SELECT
            attendance_date,
            attendance_image_path
        FROM
            attendance_record
        WHERE
            challenge_id = #{challengeId} AND user_id = #{userId}
        ORDER BY
            attendance_date ASC
    </select>

    <!-- 총 출석 일수 계산 -->
    <select id="countAttendedDays" resultType="int">
        SELECT COUNT(*)
        FROM attendance_record
        WHERE challenge_id = #{challengeId} AND user_id = #{userId}
    </select>
    
    <!-- 오늘 날짜로 이미 인증 기록이 있는지 확인 -->
    <select id="countTodayAttendance" resultType="int">
        SELECT COUNT(*)
        FROM attendance_record
        WHERE user_id = #{userId} AND challenge_id = #{challengeId} AND attendance_date = #{today}
    </select>

    <!-- 출석 기록 삽입 -->
    <insert id="insertAttendanceRecord">
        INSERT INTO attendance_record (user_id, challenge_id, attendance_date, attendance_image_path, created_at)
        VALUES (#{userId}, #{challengeId}, #{attendanceDate}, #{attendanceImagePath}, NOW())
    </insert>







    <!-- 노리개 지급 로직 관련 추가 메서드 -->
    <!-- 챌린지의 총 기간 조회 -->
    <select id="findChallengeTotalDays" resultType="int">
        SELECT challenge_duration_days
        FROM challenge
        WHERE challenge_id = #{challengeId}
    </select>

    <!-- 달성률에 맞는 노리개 등급 ID 조회 (가장 높은 등급부터 조회) -->
    <select id="findTierIdByAchievementRate" resultType="int">
        SELECT norigae_tier_id
        FROM norigae_tier
        WHERE norigae_tier_required_rate &lt;= #{rate}
        ORDER BY norigae_tier_required_rate DESC
        LIMIT 1
    </select>

    <!-- 사용자가 현재 챌린지에서 획득한 노리개 등급 ID 조회 -->
    <select id="findUserNorigaeTierId" resultType="int">
        SELECT awarded_tier_id
        FROM user_challenge_norigae
        WHERE user_id = #{userId} AND challenge_id = #{challengeId}
    </select>

    <!-- 사용자에게 노리개 등급 지급 (INSERT) -->
    <insert id="insertUserNorigae">
        INSERT INTO user_challenge_norigae (user_id, challenge_id, awarded_tier_id, awarded_date)
        VALUES (#{userId}, #{challengeId}, #{tierId}, NOW())
    </insert>

    <!-- 사용자의 노리개 등급 업데이트 (UPDATE) -->
    <update id="updateUserNorigae">
        UPDATE user_challenge_norigae
        SET awarded_tier_id = #{tierId}, awarded_date = NOW()
        WHERE user_id = #{userId} AND challenge_id = #{challengeId}
    </update>



</mapper>