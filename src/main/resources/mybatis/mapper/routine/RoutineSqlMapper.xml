<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ca.gymbackend.routine.mapper.RoutineSqlMapper">

    <select id="findAllWorkout" resultType="com.ca.gymbackend.routine.response.EveryWorkoutList">
    SELECT c.category_name, c.category_id, e.element_id, e.element_name, e.element_picture FROM workout_element e
    INNER JOIN workout_category c
    ON e.category_id = c.category_id
    </select>


    <select id="findWorkoutGuide" resultType="com.ca.gymbackend.routine.response.WorkoutGuideList">
        SELECT 
            we.element_id, 
            we.element_name, 
            we.element_picture, 
            wc.category_name, 
            wg.instruction, 
            wm.memo_content
        FROM workout_element we
        LEFT JOIN workout_category wc ON we.category_id = wc.category_id
        LEFT JOIN workout_guide wg ON wg.element_id = we.element_id
        LEFT JOIN workout_memo wm ON wm.element_id = we.element_id
        WHERE we.element_id = #{id}
    </select>

    <insert id="insertRoutineInfo" parameterType="com.ca.gymbackend.routine.dto.RoutineDto" useGeneratedKeys="true" keyProperty="routineId">
        INSERT INTO routine (user_id, routine_name, created_at)
        VALUES (#{userId}, #{routineName}, #{createdAt})
    </insert>

    <insert id="insertRoutineDetail" parameterType="com.ca.gymbackend.routine.dto.RoutineDetailDto" useGeneratedKeys="true" keyProperty="detailId">
        INSERT INTO routine_detail (routine_id, element_id, element_order)
        VALUES (#{routineId}, #{elementId}, #{elementOrder});
    </insert>


    <insert id="insertRoutineSet" parameterType="com.ca.gymbackend.routine.dto.RoutineSetDto">
        INSERT INTO routine_set (detail_id, kg, reps)
        VALUES (#{detailId}, #{kg}, #{reps});
    </insert>

<!-- Routine 이름 -->
<select id="findRoutineNameByRoutineId" resultType="String">
  SELECT routine_name FROM routine WHERE routine_id = #{routineId}
</select>

<!-- 운동 상세정보 + 세트 포함 -->
<select id="findRoutineDetailByRoutineId" resultType="com.ca.gymbackend.routine.response.RoutineDetailResponseDto">
    SELECT
        r.routine_id,
        r.routine_name,
        r.user_id,
        rd.detail_id,
        rd.element_order,
        e.element_id,
        e.element_name,
        e.element_picture,
        c.category_id,
        c.category_name
    FROM routine r
    JOIN routine_detail rd ON r.routine_id = rd.routine_id
    JOIN workout_element e ON rd.element_id = e.element_id
    JOIN workout_category c ON e.category_id = c.category_id

    WHERE r.routine_id = #{routineId}
    ORDER BY r.routine_id, rd.element_order;

</select>

    <delete id="deleteMemoByElementId">
    DELETE FROM workout_memo WHERE element_id = #{elementId}
    </delete>

    <insert id="insertMemo">
    INSERT INTO workout_memo (element_id, memo_content)
    VALUES (#{elementId}, #{memoContent})
    </insert>





    <select id="findRoutinesByUserId" resultType="com.ca.gymbackend.routine.response.RoutineByUserId">
        SELECT
            r.routine_id AS routineId,
            r.user_id AS userId,
            r.routine_name AS routineName,
            rd.detail_id AS detailId,
            rd.element_id AS elementId,
            rd.element_order AS elementOrder,
            rs.set_id AS setId,
            rs.kg AS kg,
            rs.reps AS reps
        FROM routine r
        INNER JOIN routine_detail rd ON r.routine_id = rd.routine_id
        INNER JOIN routine_set rs ON rs.detail_id = rd.detail_id
        WHERE r.user_id = #{userId}
    </select>

    <select id="findRoutineSetsByRoutineId" resultType="com.ca.gymbackend.routine.dto.RoutineSetDto">
        SELECT 
            rs.set_id AS setId,
            rs.detail_id AS detailId,
            rs.kg,
            rs.reps
        FROM routine r
        INNER JOIN routine_detail rd ON r.routine_id = rd.routine_id
        INNER JOIN routine_set rs ON rs.detail_id = rd.detail_id
        WHERE r.routine_id = #{routineId}
        ORDER BY rs.detail_id, rs.set_id;
    </select>

    <insert id="insertActualWorkout" useGeneratedKeys="true" keyProperty="workoutId">
        INSERT INTO actual_workout (user_id, routine_id, created_at)
        VALUES (#{userId}, #{routineId}, #{createdAt})
    </insert>

    <insert id="insertActualWorkoutDetail" useGeneratedKeys="true" keyProperty="detailId">
        INSERT INTO actual_workout_detail (workout_id, element_id, element_order)
        VALUES (#{workoutId}, #{elementId}, #{elementOrder})
    </insert>

    <insert id="insertActualWorkoutSet">
        INSERT INTO actual_workout_set (detail_id, kg, reps)
        VALUES (#{detailId}, #{kg}, #{reps})
    </insert>

<insert id="insertWorkoutLog">
  INSERT INTO workout_log (
    user_id, workout_id, start_time, end_time, date,
    hours, minutes, calories, created_at
  )
  VALUES (
    #{userId}, #{workoutId}, #{startTime}, #{endTime}, #{date},
    #{hours}, #{minutes}, #{calories}, #{createdAt}
  )
</insert>


<select id="findUserById" resultType="com.ca.gymbackend.portal.dto.UserDto">
  SELECT * FROM user WHERE id = #{id}
</select>

<select id="findWorkoutResultByWorkoutId" resultType="com.ca.gymbackend.routine.response.ActualWorkoutResultResponse">
SELECT
  aw.created_at,
  awd.detail_id,
  we.element_name              AS elementName,
  aws.set_id,
  aws.kg,
  aws.reps,
  we.element_picture           AS elementPicture,
  COALESCE(wl.calories, 0)     AS calories,
  COALESCE(wl.minutes, 0)      AS minutes,
  wl.start_time                AS startTime,
  wl.end_time                  AS endTime
FROM actual_workout aw
LEFT JOIN actual_workout_detail awd ON awd.workout_id = aw.workout_id
LEFT JOIN actual_workout_set    aws ON aws.detail_id   = awd.detail_id
JOIN       workout_element      we  ON we.element_id   = awd.element_id
LEFT JOIN  workout_log          wl  ON wl.workout_id   = aw.workout_id   -- ✅ 조인 추가
WHERE aw.workout_id = #{workoutId}
ORDER BY awd.detail_id, aws.set_id;

</select>

<select id="findWorkoutResultByDate" resultType="com.ca.gymbackend.routine.response.CalendarSummaryResponse">
    SELECT 
        (SELECT COUNT(DISTINCT awd.element_id)
         FROM actual_workout aw
         JOIN actual_workout_detail awd ON aw.workout_id = awd.workout_id
         WHERE aw.user_id = #{userId}
           AND DATE(aw.created_at) = #{date}
        ) AS workoutCount,

        (SELECT SUM(wl.calories)
         FROM workout_log wl
         WHERE wl.user_id = #{userId}
           AND DATE(wl.created_at) = #{date}
        ) AS calories,

        (SELECT SUM(wl.minutes)
         FROM workout_log wl
         WHERE wl.user_id = #{userId}
           AND DATE(wl.created_at) = #{date}
        ) AS workoutTime
</select>

<select id="findWorkoutDatesBetween" resultType="string">
    SELECT DISTINCT DATE(wl.created_at)
    FROM workout_log wl
    WHERE wl.user_id = #{userId}
      AND DATE(wl.created_at) BETWEEN #{startDate} AND #{endDate}
</select>

<!-- RoutineSqlMapper.xml -->

<select id="findWorkoutLogByWorkoutId" resultType="com.ca.gymbackend.routine.dto.WorkoutLogDto">
  SELECT log_id, user_id, workout_id, date, hours, minutes, calories,
         start_time, end_time, memo, picture_url, created_at
  FROM workout_log
  WHERE workout_id = #{workoutId}
  LIMIT 1
</select>

<update id="updateWorkoutLogExtras">
  UPDATE workout_log
  <set>
    <if test="memo != null"> memo = #{memo}, </if>
    <if test="pictureUrl != null"> picture_url = #{pictureUrl}, </if>
    created_at = created_at
  </set>
  WHERE workout_id = #{workoutId}
</update>

<insert id="insertEmptyWorkoutLog">
  INSERT INTO workout_log (workout_id, created_at)
  VALUES (#{workoutId}, NOW())
</insert>

<!-- 세트 삭제: JOIN으로 detail 통해 한 번에 -->
<delete id="deleteRoutineSetsByRoutineId" parameterType="int">
  DELETE s
  FROM routine_set s
  JOIN routine_detail d ON d.detail_id = s.detail_id
  WHERE d.routine_id = #{routineId}
</delete>

<!-- 디테일 삭제 -->
<delete id="deleteRoutineDetailsByRoutineId" parameterType="int">
  DELETE FROM routine_detail
  WHERE routine_id = #{routineId}
</delete>

<!-- 루틴 본체 삭제 -->
<delete id="deleteRoutineById" parameterType="int">
  DELETE FROM routine
  WHERE routine_id = #{routineId}
</delete>


</mapper>