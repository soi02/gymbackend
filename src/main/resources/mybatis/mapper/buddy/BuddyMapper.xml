<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ca.gymbackend.buddy.mapper.BuddySqlMapper">

    <insert id="insertBuddyList" parameterType="com.ca.gymbackend.buddy.dto.BuddyDto">
        INSERT INTO buddy (user_id, buddy_age_id, preferred_gender, intro)
        VALUES
        <foreach collection="buddyAgeList" item="age" separator=",">
            (#{userId}, #{age.id}, #{preferredGender}, #{intro})
        </foreach>
    </insert>

    <select id="findByAgeId" parameterType="int" resultType="com.ca.gymbackend.buddy.dto.AgeDto">
        SELECT * FROM buddy_age WHERE id = #{id}
    </select>

    <update id="updateIsBuddy" parameterType="int">
        UPDATE user
        SET is_buddy = true
        WHERE id = #{userId}
    </update>

   <select id="getBuddyUserList" resultType="map">
       SELECT 
            u.id AS user_id,
            u.name,
            u.gender,
            u.birth ,
            u.address,
            u.phone,
            u.height ,
            u.weight ,
            u.muscle_mass ,
            u.profile_image,
            b.intro,
        GROUP_CONCAT(ba.age ORDER BY ba.age SEPARATOR ', ') AS buddy_ages
        FROM user u
        JOIN buddy b ON u.id = b.user_id
        JOIN buddy_age ba ON b.buddy_age_id = ba.id
        WHERE u.is_buddy = true
        AND u.id != #{loggedInUserId} GROUP BY u.id
    </select>

    <select id="isBuddy" parameterType="int" resultType="boolean">
        SELECT is_buddy
        FROM user
        WHERE id = #{userId}
    </select>

    <insert id="insertMatching">
        INSERT INTO matching (send_buddy_id, receiver_buddy_id)
        VALUES (#{sendBuddyId}, #{receiverBuddyId});
    </insert>

    <update id="updateMatchingStatus" parameterType="map">
        UPDATE matching
        SET status = #{status}
        WHERE id = #{id}
    </update>

    <select id="selectMatchingNotifications" resultType="map">
        SELECT
            m.id AS matching_id,
            m.send_buddy_id,
            m.receiver_buddy_id,
            m.status,
            sb.intro AS sender_intro,
            rb.intro AS receiver_intro,
            su.name AS sender_name,
            ru.name AS receiver_name,
            su.profile_image AS sender_image,
            ru.profile_image AS receiver_image
        FROM matching m
        LEFT JOIN user su ON m.send_buddy_id = su.id
        LEFT JOIN user ru ON m.receiver_buddy_id = ru.id
        LEFT JOIN buddy sb ON m.send_buddy_id = sb.user_id
        LEFT JOIN buddy rb ON m.receiver_buddy_id = rb.user_id
        WHERE m.send_buddy_id = #{buddyId} OR m.receiver_buddy_id = #{buddyId}
        GROUP BY m.id ORDER BY m.id DESC
    </select>

    <select id="getChatRoomsByBuddyId">
         SELECT 
        m.id AS matchingId,
        CASE 
            WHEN m.send_buddy_id = #{buddyId} THEN u2.name
            ELSE u1.name
        END AS opponentName,
        CASE 
            WHEN m.send_buddy_id = #{buddyId} THEN u2.profile_image
            ELSE u1.profile_image
        END AS opponentProfileImage,
        CASE 
            WHEN m.send_buddy_id = #{buddyId} THEN b2.intro
            ELSE b1.intro
        END AS opponentIntro,
        ch.message AS lastMessage,
        ch.sent_at AS lastSentAt,
        (
            SELECT COUNT(*)
            FROM chat
            WHERE matching_id = m.id
              AND is_read = FALSE
              AND send_buddy_id != #{buddyId}
        ) AS unreadCount
        FROM matching m
        JOIN buddy b1 ON m.send_buddy_id = b1.id
        JOIN user u1 ON b1.user_id = u1.id
        JOIN buddy b2 ON m.receiver_buddy_id = b2.id
        JOIN user u2 ON b2.user_id = u2.id
        LEFT JOIN chat ch ON ch.id = (
            SELECT id FROM chat 
            WHERE matching_id = m.id 
            ORDER BY sent_at DESC 
            LIMIT 1
        )
        WHERE m.status = '수락'
        AND (m.send_buddy_id = #{buddyId} OR m.receiver_buddy_id = #{buddyId})
        ORDER BY ch.sent_at DESC
    </select>

    <insert id="insertInitialChat" parameterType="map">
        INSERT INTO chat (matching_id, send_buddy_id, message, sent_at, is_read)
        VALUES (#{matchingId}, #{sendBuddyId}, '안녕하세요.', NOW(), false)
    </insert>

    <select id="selectMatchingInfo" parameterType="int" resultType="map">
        SELECT 
            m.send_buddy_id AS buddy1Id,
            u1.name AS buddy1Name,
            u1.profile_image AS buddy1ProfileImage,
            m.receiver_buddy_id AS buddy2Id,
            u2.name AS buddy2Name,
            u2.profile_image AS buddy2ProfileImage
        FROM matching m
        JOIN user u1 ON m.send_buddy_id = u1.id
        JOIN user u2 ON m.receiver_buddy_id = u2.id
        WHERE m.id = #{matchingId}
    </select>

    <insert id="insertChat"  useGeneratedKeys="true" keyProperty="id">
        INSERT INTO chat (
            matching_id,
            send_buddy_id,
            message,
            is_read,
            sent_at
        ) VALUES (
            #{matchingId},
            #{sendBuddyId},
            #{message},
            #{isRead},
            #{sentAt}
        )
    </insert>

    <select id="selectChatsByMatchingId" parameterType="int">
         SELECT
            c.id,
            c.matching_id,
            c.send_buddy_id,
            c.message,
            c.is_read,
            c.sent_at,
            u.name AS senderName,
            u.profile_image AS senderProfileImageUrl            
        FROM chat c
        JOIN buddy b
        ON c.send_buddy_id = b.id
        JOIN user u
        ON b.user_id = u.id
        WHERE c.matching_id = #{matchingId}
        ORDER BY c.sent_at ASC
    </select>

    <select id="selectUnreadChatIds" resultType="int">
        SELECT id
        FROM chat
        WHERE matching_id = #{matchingId}
        AND send_buddy_id != #{readerBuddyId}
        AND is_read = FALSE
    </select>

    <update id="markMessagesAsRead">
        UPDATE chat
        SET is_read = TRUE
        WHERE matching_id = #{matchingId}
        AND send_buddy_id != #{readerBuddyId}
        AND is_read = FALSE
    </update>
</mapper>